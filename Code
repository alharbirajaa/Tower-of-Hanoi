import java.util.Stack;
import java.util.EmptyStackException;
public class Player //start of Player class
{
 private String name;
 private int move;
 //constructor
 public Player(String p)
 {
 setName(p);
 }
 //set&get method
 public void setName(String n)
 {
 name=n;
 }

 public String getName()
 {
 return name;
 }
 //operations on the movments depending on the rules of the game
 public void diskMovment(int t1,int t2,Stack<Integer> n1,Stack<Integer> n2,Stack<Integer> n3)
 {
 if (t2==1){
 if(t1==1){}

 if(t1==2)

 if(n2.isEmpty()||n1.isEmpty()||n1.peek()>n2.peek())
 try{//catching the exeption of poping an empty stack
 n1.push(n2.pop());
 System.out.println(" moves: "+move());
 }catch(EmptyStackException e){
 System.out.println("It is empty. Try again");
 }
 else
 System.out.println("wrong movment");

 if(t1==3 ){

 if(n3.isEmpty()||n1.isEmpty()||n1.peek()>n3.peek())
 try{
 n1.push(n3.pop());
 System.out.println(" moves: "+move());
 }catch(EmptyStackException e){
 System.out.println("It is empty. Try again");
 }
 else
 System.out.println("wrong movment");
 }
 }

 if (t2==2){

 if(t1==1){
 if(n1.isEmpty()||n2.isEmpty()||n2.peek()>n1.peek())
 try{
 n2.push(n1.pop());
 System.out.println(" moves: "+move());
 }catch(EmptyStackException e){
 System.out.println("It is empty. Try again");
 }
 else
 System.out.println("wrong movment");}

 if(t1==2){}

 if(t1==3 ){

 if(n3.isEmpty()||n2.isEmpty()||n2.peek()>n3.peek())
 try{
 n2.push(n3.pop());
 System.out.println(" moves: "+move());
 }catch(EmptyStackException e){
 System.out.println("It is empty. Try again");
 }
 else
 System.out.println("wrong movment");
 }
 }

 if (t2==3){
 if(t1==1){

 if(n1.isEmpty()||n3.isEmpty()||n3.peek()>n1.peek()) // r played in it
 try{
 n3.push(n1.pop());
 System.out.println(" moves: "+move());
 }catch(EmptyStackException e){
 System.out.println("It is empty. Try again");
 }
 else
 System.out.println("wrong movment");}

 if(t1==2)

 if(n3.isEmpty()||n2.isEmpty()||n3.peek()>n2.peek())
 try{
 n3.push(n2.pop());
 System.out.println(" moves: "+move());
 } catch(EmptyStackException e){
 System.out.println("It is empty. Try again");
 }
 else
 System.out.println("wrong movment");

 if(t1==3 ){}
 }
 }

 public int move(){
 return move++;//movment counter
 }
} //End of Player class
import java.io.*;
import java.math.*;
import java.util.*;
public class TowerOfHanoi{ //start of TowerOfHanoi class

public static void main(String args[]){

 Scanner in = new Scanner(System.in);
 int table1,table2,disk,IntMinMove;

 String p1name,p2name;
 // game instructions
 System.out.printf("\n **TOWER OF HANOI**\n");
 System.out.println("The objective of the game is to move the entire numbers to the last rod");
 System.out.printf("\nRules:\n Only one number can move at atime.\n No larger number may be
placed on a smaller number\n\n ");
 //Declear 3 stack for the towers
 Stack<Integer> num1 =new<Integer> Stack();
 Stack<Integer> num2 =new<Integer> Stack();
 Stack<Integer> num3 =new<Integer> Stack();
 //let user choose the level
 System.out.println("Choose the level:");
 System.out.println("3-Easy 4-Medium 5-Hard");
 disk=in.nextInt();
 //Players Name
 System.out.println(" player1's name:");
 p1name=in.next();
 Player p1=new Player(p1name);
 System.out.println(" player2's name:");
 p2name=in.next();
 Player p2=new Player(p2name);
 //leval tapy
 if(disk<=5&&disk>=3)
 for(int i=disk;i<=disk&&i>0;i--)
 num1.push(i);
 else
 System.out.println("Minimum number of disks is 3 .Maximum number of disks is 5 ");

 System.out.println("Tower1 "+num1+" moves: "+p1.move());
 System.out.println("Tower2 "+num2+"");
 System.out.println("Tower3 "+num3+"");
 do{
 //Start game player 1
 System.out.println();
 System.out.println(" player 1: ");
 System.out.println("from Tower number?");
 table1=in.nextInt(); //move from
 System.out.println("to Tower number?");
 table2=in.nextInt(); //move to
 p1.diskMovment(table1, table2, num1, num2, num3);
 System.out.println("Tower1 "+num1 );
 System.out.println("Tower2 "+num2+"");
 System.out.println("Tower3 "+num3+"");
 System.out.println();
 }while(num3.size()!=disk);
 //fill stack 1
 if(disk<=5&&disk>=3)
 for(int i=disk;i<=disk&&i>0;i--)
 { num1.push(i);
 num3.pop();
 }

 else
 System.out.println("Minimum number of disks is 3 .Maximum number of disks is 5 ");

 System.out.println("Tower1 "+num1+" moves: "+p2.move());
 System.out.println("Tower2 "+num2+"");
 System.out.println("Tower3 "+num3+"");

 do{
 //start game for player 2
 System.out.println( );
 System.out.println(" player 2: ");
 System.out.println("from Tower number?");
 table1=in.nextInt();//move frome
 System.out.println("to Tower number?");
 table2=in.nextInt();//move to
 p2.diskMovment(table1, table2, num1, num2, num3);
 System.out.println("Tower1 "+num1 );
 System.out.println("Tower2 "+num2+"");
 System.out.println("Tower3 "+num3+"");
 }while(num3.size()!=disk);

 System.out.println("Winner: "+winner(p1,p2));
 //find minimum number of movments
 double minmove =Math.pow(2,disk);
 IntMinMove =(int) minmove-1;
 System.out.printf("\n\n GREAT JOB \nMinimum number of movment is %d",IntMinMove);//End
the game
}
//Compare the moves between players
public static String winner(Player p1,Player p2){
 String win=null;
 if(p1.move()<p2.move())
 win= p1.getName();
 else if(p1.move()>p2.move())
 win= p2.getName();
 else if(p1.move()==p2.move())
 win= "no winner";
 return win;
}
} //End of TowerOfHanoi class
